主要原則

- 簡潔かつ技術的に正確な記述を心がけ、的確なAstroのコード例を示します。
- Astroのパーシャルハイドレーションとマルチフレームワークサポートを効果的に活用します。
- 静的生成と最小限のJavaScriptを優先し、最適なパフォーマンスを目指します。
- 説明的な変数名を使用し、Astroの命名規則に従います。
- Astroのファイルベースルーティングシステムを用いてファイルを整理します。
- このプロジェクトでは、CSRを基本とします
- 日本語で出力します


Astroプロジェクト構造

- 推奨されるAstroプロジェクト構造を使用します：
  - src/
    - components/
    - layouts/
    - pages/
    - styles/
  - public/
  - astro.config.mjs

コンポーネント開発

- Astroコンポーネントには`.astro`ファイルを作成します。
- 必要に応じて、フレームワーク固有のコンポーネント（React、Vue、Svelte）を使用します。
- 適切なコンポーネントの構成と再利用性を実装します。
- データ受け渡しにはAstroのコンポーネントpropsを使用します。
- 必要に応じて、Astroの組み込みコンポーネントを活用します。

ルーティングとページ

- `src/pages/`ディレクトリにあるAstroのファイルベースルーティングシステムを利用します。
- `[...slug].astro`構文を使用して動的ルートを実装します。
- 動的ルートを持つ静的ページを生成するために`getStaticPaths()`を使用します。
- `404.astro`ページを使用して適切な404ハンドリングを実装します。

コンテンツ管理

- コンテンツが多いページにはMarkdown（`.md`）またはMDX（`.mdx`）ファイルを使用します。
- Markdownファイルでのフロントマターに対するAstroの組み込みサポートを活用します。
- 整理されたコンテンツ管理のためにコンテンツコレクションを実装します。

スタイリング

- `.astro`ファイル内で`<style>`タグを使用し、Astroのスコープ付きスタイリングを利用します。
- 必要に応じてグローバルスタイルを活用し、レイアウトでインポートします。
- 必要であれば、SassやLessを用いたCSSプリプロセッシングを利用します。
- CSSカスタムプロパティとメディアクエリを使用してレスポンシブデザインを実装します。

パフォーマンス最適化

- クライアントサイドJavaScriptの使用を最小限に抑え、Astroの静的生成を活用します。
- `client:*`ディレクティブを慎重に使用してパーシャルハイドレーションを行います：
  - `client:load`：即時インタラクティビティが必要な場合
  - `client:idle`：重要度の低いインタラクティビティの場合
  - `client:visible`：表示されたときにハイドレーションすべきコンポーネントの場合
- 画像やその他のアセットに対して適切な遅延読み込み（レイジーローディング）を実装します。
- Astroの組み込みアセット最適化機能を活用します。

データ取得

- コンポーネントへのデータ渡しには`Astro.props`を使用します。
- ビルド時にデータを取得するために`getStaticPaths()`を実装します。
- ローカルファイルを効率的に扱うために`Astro.glob()`を使用します。
- データ取得操作に対して適切なエラーハンドリングを実装します。

SEOとメタタグ

- メタ情報を追加するためにAstroの`<head>`タグを使用します。
- 適切なSEOのためにCanonical URLを実装します。
- 再利用可能なSEO設定のために`<SEO>`コンポーネントパターンを使用します。

インテグレーションとプラグイン

- 機能拡張のためにAstroインテグレーション（例：`@astrojs/image`）を活用します。
- `astro.config.mjs`でインテグレーションのための適切な設定を実装します。
- より良い互換性のために、利用可能な場合はAstroの公式インテグレーションを使用します。

ビルドとデプロイ

- Astroのビルドコマンドを使用してビルドプロセスを最適化します。
- 異なる環境に対して適切な環境変数ハンドリングを実装します。
- Astroと互換性のある静的ホスティングプラットフォーム（Netlify、Vercelなど）を使用します。
- 自動化されたビルドとデプロイのために適切なCI/CDパイプラインを実装します。

Tailwind CSSによるスタイリング

- `@astrojs/tailwind`を使用してTailwind CSSをAstroに統合します。

Tailwind CSSのベストプラクティス

- Astroコンポーネント内でTailwindのユーティリティクラスを広範に使用します。
- Tailwindのレスポンシブデザインユーティリティ（`sm:`、`md:`、`lg:`など）を活用します。
- 一貫性のためにTailwindのカラーパレットとスペーシングスケールを利用します。
- 必要に応じて`tailwind.config.cjs`でカスタムテーマ拡張を実装します。
- `@apply`ディレクティブは決して使用しません。

テスト

- ユーティリティ関数やヘルパーに対して単体テスト（ユニットテスト）を実装します。
- ビルドされたサイトのテストにはCypressのようなエンドツーエンドテストツールを使用します。
- 該当する場合はビジュアルリグレッションテストを実装します。

アクセシビリティ

- Astroコンポーネント内で適切なセマンティックHTML構造を確保します。
- 必要な箇所にARIA属性を実装します。
- インタラクティブな要素に対してキーボードナビゲーションのサポートを確保します。

主要な規約

1. 一貫したコードフォーマットのためにAstroのスタイルガイドに従います。
2. 型安全性と開発者エクスペリエンス向上のためにTypeScriptを使用します。
3. 適切なエラーハンドリングとロギングを実装します。
4. コンテンツが多いサイトのためにAstroのRSSフィード生成機能を活用します。
5. 最適化された画像配信のためにAstroのImageコンポーネントを使用します。

パフォーマンス指標

- 開発においてコアウェブバイタル（LCP、FID、CLS）を優先します。
- パフォーマンス監査にはLighthouseやWebPageTestを使用します。
- パフォーマンスバジェットとモニタリングを実装します。

コンポーネント、ルーティング、インテグレーションに関するベストプラクティスの詳細については、Astroの公式ドキュメントを参照してください。
